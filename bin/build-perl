#!/bin/bash
set -e

[ -z "$HELPERS_ROOT" ] && export HELPERS_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
source "$HELPERS_ROOT/lib/debug.sh"
source "$HELPERS_ROOT/lib/util.bash"

if [ -z "$1" ]; then
  echo "Perl to build must be specified!"
  exit 1
fi

function perlbrew_check {
  perlbrew list | cut -c3- | awk '{ print $1 }' | grep -q -x -F "$1"
}

function perlbrew_build {
  local perl_version="$1"
  local brewver="${perl_version/-*/}"
  local minor_version
  if [[ "$brewver" =~ ^[0-9]\.[0-9][0-9]?$ ]]; then
    brewver="$(
      perlbrew available --all \
      | awk '{ print $1 }' \
      | grep -E "^perl-${brewver/./\\.}\\.[0-9][0-9]?$" \
      | cut -c6- \
      | sort -r -n -t. -k3 \
      | head -1
    )"
    if [ -z "$brewver" ]; then
      echo "Unable to find perl for $perl_version!" >&2
      return 1
    fi
  fi

  local brewopts=(--notest --noman --verbose)
  minor_version="$(sed -n -E -e's/^5\.([0-9]+).*/\1/p' <<< "$brewver")"

  [[ "$brewver" == blead || "$minor_version" -ge 14 ]] && brewopts+=(-j "$(system-cores + 1)")
  [[ "${perl_version}-" =~ '-thr-' ]] && brewopts+=(-Duseithreads)
  [[ "${perl_version}-" =~ '-mb-' ]]  && brewopts+=(-Dusemorebits)
  [[ "${perl_version}-" =~ '-dbg-' ]] && brewopts+=(-DDEBUGGING)
  [[ "${perl_version}-" =~ '-shrplib-' ]] && brewopts+=(-Duseshrplib -Duseithreads) # :(
  [[ "${perl_version}-" =~ '-extra-' ]] && brewopts+=(-Duseshrplib -Duseithreads)
  [[ "${perl_version}-" =~ '-qm-' ]] && brewopts+=(-Dusequadmath)
  [[ "${perl_version}-" =~ '-ld-' ]] && brewopts+=(-Duselongdouble)

  if [[ "$minor_version" =~ ^[0-5]$ ]]; then
    # Perl versions prior to 5.6 have version format 5.00X_YY
    rel_version="$(sed -n -E -e's/^5\.[0-9]\.//p' <<< "$brewver")"
    [[ "$rel_version" =~ ^[0-9]$ ]] && rel_version="0$rel_version"
    [ -n "$rel_version" ] && rel_version="_$rel_version"
    brewver="5.00${minor_version}${rel_version}"
    # perlbrew does not call patchperl correctly, upstream patch: https://github.com/gugod/App-perlbrew/pull/674
    sed 's/push @preconfigure_commands, \$patchperl/push @preconfigure_commands, "chmod -R +w .", \$patchperl/' -i `which perlbrew`
  fi

  printf "Building Perl %s ..." "${perl_version}"
  run-with-progress perlbrew install --as "$perl_version" "${brewopts[@]}" "$brewver"

  if ! perlbrew_check "$perl_version"; then
    echo "Perl $perl_version was not installed - compilation failed...?" 1>&2
    return 1
  fi
}

perlbrew self-upgrade > /dev/null
perlbrew install-cpanm -f > /dev/null

perl_alias=""
full_version="$1"
local_lib="${full_version/*@/}"
perl_version="${full_version/@*/}"
[ "$local_lib" == "$full_version" ] && unset local_lib

function latest-perl {
  local match="$1"
  perlbrew available --all \
  | perl -nle'
    BEGIN { $match = shift @ARGV }
    if (/^i? *perl-(5\.([0-9]+)\.([0-9]+))\b/) {
      my ($v, $m, $p) = ($1, $2, $3);
      next
        unless $v =~ /\A$match\z/;
      push @f, [$v, 5+$m/1000+$p/1000/1000];
    }
    END {
      print +(sort { $b->[1] <=> $a->[1] } @f)[0][0]
        if @f;
    }
  ' "$match"
}

if [[ "$perl_version" == "dev" ]] || [[ "$perl_version" == dev-* ]]; then
  latest_dev="$(latest-perl '5\.[0-9]*[13579]\.[0-9]*')"
  if [ -z "$latest_dev" ]; then
    echo "No development perl available!" 1>&2
  fi
  perl_alias="$perl_version"
  perl_version="${perl_version/dev/$latest_dev}"
elif [[ "$perl_version" == "stable" ]] || [[ "$perl_version" == stable-* ]]; then
  latest_stable="$(latest-perl '5\.[0-9]*[02468]\.[0-9]*')"
  if [ -z "$latest_stable" ]; then
    echo "No stable perl available!" 1>&2
  fi
  perl_alias="$perl_version"
  perl_version="${perl_version/stable/$latest_stable}"
fi

if [ "$perl_version" == "system" ]; then
  echo "Using system provided perl."
elif perlbrew_check "$perl_version"; then
  echo "Perl ${perl_version} already installed."
elif [ -z "$REBUILD_PERL" ] && "$HELPERS_ROOT/bin/get-prebuilt" "perl/$perl_version" --check; then
  echo "Downloading pre-built Perl ${perl_version}..."
  "$HELPERS_ROOT/bin/get-prebuilt" "perl/$perl_version" "$PERLBREW_ROOT/perls/$perl_version"
  echo Done.
else
  perlbrew_build "$perl_version"
fi

if [ -n "$perl_alias" ]; then
  perlbrew alias create -f "$perl_version" "$perl_alias"
fi

if [ -n "$local_lib" ]; then
  "$HELPERS_ROOT/bin/local-lib-installer" "$perl_version@$local_lib"
fi
